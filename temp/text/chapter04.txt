http://www.cnblogs.com/huaan011/p/4381703.html  堆内存的一些了解

https://www.cnblogs.com/ys-ys/p/5300189.html

var obj_a = {value:1};
function fn_a(arg){
    arg={value:2};
};
fn_a(obj_a);
// 这时候obj_a还是{value:1}
function fn_b(arg){
    arg.value=3;
};
fn_b(obj_a);
// 这时候obj_a是{value:3}
复制代码

var a = {n:1}; 
var b = a; 
a.x = a = {n:2}; 

<<<<<<< HEAD
=================== 详解JavaScript中的Event Loop（事件循环）机制

https://zhuanlan.zhihu.com/p/33058983


======================
我们都知道，javascript从诞生之日起就是一门单线程的非阻塞的脚本语言。这是由其最初的用途来决定的：与浏览器交互。

单线程意味着，javascript代码在执行的任何时候，都只有一个主线程来处理所有的任务。

而非阻塞则是当代码需要进行一项异步任务（无法立刻返回结果，需要花一定时间才能返回的任务，如I/O事件）的时候，主线程会挂起（pending）这个任务，然后在异步任务返回结果的时候再根据一定规则去执行相应的回调。

===========================
我们知道，当我们调用一个方法的时候，js会生成一个与这个方法对应的执行环境（context），又叫执行上下文。这个执行环境中存在着这个方法的私有作用域，上层作用域的指向，方法的参数，这个作用域中定义的变量以及这个作用域的this对象。
=======
基本类型在内在中具有固定的大小，而引用类型则不同。例如，对象可以具有任意的长度，无固定大小。数组也是。

基本类型变量存的是数据的具体值，而引用类型变量保存的是值的引用。

https://segmentfault.com/a/1190000008472264  基本数据类型和引用类型的区别详解

https://blog.csdn.net/pingfan592/article/details/55189622 // js 内存
>>>>>>> c891c1ebd33364b65990cb21c77c5e7702e3a3ea
